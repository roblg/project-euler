

(let ((simple '((1 . "one")
  (2 . "two")
  (3 . "three")
  (4 . "four")
  (5 . "five")
  (6 . "six")
  (7 . "seven")
  (8 . "eight")
  (9 . "nine")
  (10 . "ten")
  (11 . "eleven")
  (12 . "twelve")
  (13 . "thirteen")
  (14 . "fourteen")
  (15 . "fifteen")
  (16 . "sixteen")
  (17 . "seventeen")
  (18 . "eighteen")
  (19 . "nineteen"))))
  
  (defun get-number-string (n)
    (cond
      ((zerop n) (format nil ""))
      ((= n 1000) (format nil "onethousand"))
      ((< n 20) (cdr (assoc n simple)))
      ((< n 30) (format nil "twenty~A" (get-number-string (mod n 10))))
      ((< n 40) (format nil "thirty~A" (get-number-string (mod n 10))))
      ((< n 50) (format nil "forty~A" (get-number-string (mod n 10))))
      ((< n 60) (format nil "fifty~A" (get-number-string (mod n 10))))
      ((< n 70) (format nil "sixty~A" (get-number-string (mod n 10))))
      ((< n 80) (format nil "seventy~A" (get-number-string (mod n 10))))
      ((< n 90) (format nil "eighty~A" (get-number-string (mod n 10))))
      ((< n 100) (format nil "ninety~A" (get-number-string (mod n 10))))
      ((= 0 (mod n 100)) (format nil "~Ahundred" (get-number-string (floor (/ n 100)))))
      (t (format nil "~Ahundredand~A" (get-number-string (floor (/ n 100))) (get-number-string (mod n 100))))
))
)

(defun problem-17 ()
  (let ((char-count 0))
    (do ((i 1 (1+ i)))
	((> i 1000))
      (format t "~A~%" (get-number-string i))
      (setf char-count (+ char-count (length (get-number-string i)))))
    char-count))
    