(let ((triangle-num 1) (n 2))
  (defun next-triangle-num ()
    (let ((x triangle-num))
      (setf triangle-num (+ triangle-num n))
      (setf n (1+ n))
      x))
  (defun reset-triangle-num ()
    (setf triangle-num 1)
    (setf n 1)
    nil))

(defun num-divisors (n)
  (let ((count 0))
    (do ((i 1 (+ i 1)))
	((> (* i i) n))
      (cond ((= n (* i i)) (setf count (+ count 1)))
	    ((= 0 (mod n i)) (setf count (+ count 2)))))
    count))

(defun problem-12 ()
  (do ((i (next-triangle-num) (next-triangle-num)))
      ((> (num-divisors i) 500) i)))